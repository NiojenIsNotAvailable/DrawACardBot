from typing import Final
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
import random
import os

# –¢–æ–∫–µ–Ω –∑ .env –∞–±–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
BOT_USERNAME: Final = '@DrawACardBot'

# –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
ALLOWED_COMMANDS = {'start', 'help', 'battle', 'draw', 'end'}

# –ö–æ–ª–æ–¥–∞
suits = {
    'Hearts': '‚ô•Ô∏è',
    'Diamonds': '‚ô¶Ô∏è',
    'Spades': '‚ô†Ô∏è',
    'Clubs': '‚ô£Ô∏è'
}
ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']
FULL_DECK = [f'{rank} {suits[suit]}' for suit in suits for rank in ranks] + ['Joker (Red)', 'Joker (Black)']
active_deck = []

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—à–∞
def is_our_command(update: Update) -> str | None:
    text = update.message.text or ""
    if not text.startswith('/'):
        return None
    parts = text[1:].split('@')
    command = parts[0].split()[0]

    if command not in ALLOWED_COMMANDS:
        return None

    if len(parts) == 2 and parts[1].lower() != BOT_USERNAME[1:].lower():
        return None

    return command

# –ö–æ–º–∞–Ω–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú—è–≤")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú—É—Ä–º—è–≤–º—É—Ä–º—ñ—É–º—è–≤:\n"
        "/battle ‚Äî –ø–æ—á–∞—Ç–∏ –±—ñ–π\n"
        "/draw ‚Äî –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É\n"
        "/end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π"
    )

async def battle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck
    active_deck = FULL_DECK.copy()
    random.shuffle(active_deck)
    await update.message.reply_text("FIGHT! (–ö–æ–ª–æ–¥–∞ –≥–æ—Ç–æ–≤–∞ üÉè)")

async def draw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck

    if not active_deck:
        await update.message.reply_text("–ë—ñ–π –Ω–µ –ø–æ—á–∞–≤—Å—è. –Æ–∑ /battle")
        return

    drawn_card = active_deck.pop()
    user_name = update.message.from_user.username or "–ì—Ä–∞–≤–µ—Ü—å"
    await update.message.reply_text(f'@{user_name} –≤–∏—Ç—è–≥—É—î –∫–∞—Ä—Ç—É: {drawn_card}')

    if 'Joker' in drawn_card:
        active_deck = FULL_DECK.copy()
        random.shuffle(active_deck)
        await update.message.reply_text("üéâ –î–ñ–û–ö–ï–† –•–ï–õ–õ–ô–ï–ê–ê–•–•! +1 –±–µ–Ω–Ω—ñ, —ñ +2 –¥–æ –≤—Å—ñ—Ö –∫–∏–¥–∫—ñ–≤ (–ö–æ–ª–æ–¥–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞).")

async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck
    active_deck = []
    await update.message.reply_text("–ë—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–æ–ª–æ–¥–∞ –æ—á–∏—â–µ–Ω–∞.")

# –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —É—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
async def handle_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = is_our_command(update)
    if not command:
        return  # —á—É–∂–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ ‚Äî —ñ–≥–Ω–æ—Ä

    if command == "start":
        await start_command(update, context)
    elif command == "help":
        await help_command(update, context)
    elif command == "battle":
        await battle_command(update, context)
    elif command == "draw":
        await draw_command(update, context)
    elif command == "end":
        await end_command(update, context)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    print("Starting...")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/'), handle_text_command))
    app.add_error_handler(error)

    print("Polling...")
    app.run_polling(poll_interval=3)
