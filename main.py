from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import random
import os
TOKEN = os.getenv("TOKEN")

BOT_USERNAME: Final = '@DrawACardBot'

# –°—Ç–∞—Ç–∏—á–Ω–∞ –ø–æ–≤–Ω–∞ –∫–æ–ª–æ–¥–∞
suits = {
    'Hearts': '‚ô•Ô∏è',
    'Diamonds': '‚ô¶Ô∏è',
    'Spades': '‚ô†Ô∏è',
    'Clubs': '‚ô£Ô∏è'
}
ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']
FULL_DECK = [f'{rank} {suits[suit]}' for suit in suits for rank in ranks] + ['Joker (Red)', 'Joker (Black)']

# –ó–º—ñ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ–ª–æ–¥–∏
active_deck = []

# /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú—è–≤")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú—É—Ä–º—è–≤–º—É—Ä–º—ñ—É–º—è–≤:\n/battle ‚Äî –ø–æ—á–∞—Ç–∏ –±—ñ–π\n/draw ‚Äî –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É\n/end ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –±—ñ–π")

# /battle
async def battle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck
    active_deck = FULL_DECK.copy()
    random.shuffle(active_deck)
    await update.message.reply_text("FIGHT! (–ö–æ–ª–æ–¥–∞ –≥–æ—Ç–æ–≤–∞ üÉè)")

# /draw
async def draw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck

    if not active_deck:
        await update.message.reply_text("–ë—ñ–π –Ω–µ –ø–æ—á–∞–≤—Å—è. –Æ–∑ /battle")
        return

    drawn_card = active_deck.pop()
    user_name = update.message.from_user.username
    await update.message.reply_text(f'@{user_name} –≤–∏—Ç—è–≥—É—î –∫–∞—Ä—Ç—É: {drawn_card}')

    if 'Joker' in drawn_card:
        active_deck = FULL_DECK.copy()
        random.shuffle(active_deck)
        await update.message.reply_text("üéâ –î–ñ–û–ö–ï–† –•–ï–õ–õ–ô–ï–ê–ê–•–•! +1 –±–µ–Ω–Ω—ñ, —ñ +2 –¥–æ –≤—Å—ñ—Ö –∫–∏–¥–∫—ñ–≤ (–ö–æ–ª–æ–¥–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞).")

# /end
async def end_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_deck
    active_deck = []
    await update.message.reply_text("–ë—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–æ–ª–æ–¥–∞ –æ—á–∏—â–µ–Ω–∞.")

# Error handler
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}') 

# main
if __name__ == '__main__':
    print("Starting...")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('battle', battle_command))
    app.add_handler(CommandHandler('draw', draw_command))
    app.add_handler(CommandHandler('end', end_command))

    app.add_error_handler(error)
    print("Polling...")
    app.run_polling(poll_interval=3)
